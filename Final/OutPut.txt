Token: int, Lexeme: int
Token: variable, Lexeme: x
Token: assignment, Lexeme: =
Token: number, Lexeme: 5
Token: semicolon, Lexeme: ;
Token: double, Lexeme: double
Token: variable, Lexeme: y
Token: assignment, Lexeme: =
Token: number, Lexeme: 3.14
Token: semicolon, Lexeme: ;
Token: boolean, Lexeme: boolean
Token: variable, Lexeme: flag
Token: assignment, Lexeme: =
Token: true, Lexeme: true
Token: semicolon, Lexeme: ;
Token: if, Lexeme: if
Token: open_parenthesis, Lexeme: (
Token: variable, Lexeme: x
Token: greater_than, Lexeme: >
Token: number, Lexeme: 0
Token: close_parenthesis, Lexeme: )
Token: open_brace, Lexeme: {
Token: system_out_println, Lexeme: System.out.println
Token: open_parenthesis, Lexeme: (
Token: string, Lexeme: "x is positive"
Token: close_parenthesis, Lexeme: )
Token: semicolon, Lexeme: ;
Token: close_brace, Lexeme: }
Token: else, Lexeme: else
Token: open_brace, Lexeme: {
Token: system_out_println, Lexeme: System.out.println
Token: open_parenthesis, Lexeme: (
Token: string, Lexeme: "x is negative or zero"
Token: close_parenthesis, Lexeme: )
Token: semicolon, Lexeme: ;
Token: close_brace, Lexeme: }
